{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.6.1.6515",
      "templateHash": "1440913075509874073"
    }
  },
  "parameters": {
    "baseResourceName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The base name to use for the resources that will be provisioned."
      }
    },
    "appClientId": {
      "type": "string",
      "maxLength": 36,
      "minLength": 36,
      "metadata": {
        "description": "The client ID of the Azure AD app, e.g., 123e4567-e89b-12d3-a456-426655440000."
      }
    },
    "appClientSecret": {
      "type": "secureString",
      "minLength": 1,
      "metadata": {
        "description": "The client secret of the Azure AD app."
      }
    },
    "customDomainOption": {
      "type": "string",
      "defaultValue": "Azure Front Door",
      "allowedValues": [
        "Custom domain name (recommended)",
        "Azure Front Door"
      ],
      "metadata": {
        "description": "How the app will be hosted on a domain that is not *.azurewebsites.net. Azure Front Door is an easy option that the template can set up automatically, but it comes with ongoing monthly costs."
      }
    },
    "customDomainName": {
      "type": "string",
      "defaultValue": "xyz.com",
      "metadata": {
        "description": "Custom domain name (if chosen)."
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "maxLength": 36,
      "minLength": 1,
      "metadata": {
        "description": "The ID of the tenant to which the app will be deployed."
      }
    },
    "sku": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "The pricing tier for the hosting plan."
      }
    },
    "planSize": {
      "type": "string",
      "defaultValue": "2",
      "allowedValues": [
        "1",
        "2",
        "3"
      ],
      "metadata": {
        "description": "The size of the hosting plan (small = 1, medium = 2, or large = 3)."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "gitRepoUrl": {
      "type": "string",
      "defaultValue": "https://github.com/gence/microsoft-teams-apps-contactgrouplookup.git",
      "metadata": {
        "description": "The URL to the GitHub repository to deploy."
      }
    },
    "gitBranch": {
      "type": "string",
      "defaultValue": "master",
      "metadata": {
        "description": "The branch of the GitHub repository to deploy."
      }
    },
    "cacheInterval": {
      "type": "int",
      "defaultValue": 60,
      "metadata": {
        "description": "Number of seconds to cache user presence information in memory."
      }
    }
  },
  "variables": {
    "uniqueHash": "[uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('baseResourceName'))]",
    "appName": "[parameters('baseResourceName')]",
    "appDomain": "[format('{0}.azurewebsites.net', variables('appName'))]",
    "hostingPlanName": "[parameters('baseResourceName')]",
    "storageAccountName": "[format('{0}{1}', substring(parameters('baseResourceName'), 0, 11), variables('uniqueHash'))]",
    "appInsightsName": "[parameters('baseResourceName')]",
    "logAnalyticsName": "[parameters('baseResourceName')]",
    "keyVaultName": "[format('{0}{1}', substring(parameters('baseResourceName'), 0, 11), variables('uniqueHash'))]",
    "useFrontDoor": "[equals(parameters('customDomainOption'), 'Azure Front Door')]",
    "frontDoorName": "[parameters('baseResourceName')]",
    "sharedSkus": [
      "Free",
      "Shared"
    ],
    "isSharedPlan": "[contains(variables('sharedSkus'), parameters('sku'))]",
    "skuFamily": "[if(equals(parameters('sku'), 'Shared'), 'D', take(parameters('sku'), 1))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-08-01",
      "name": "[variables('storageAccountName')]",
      "kind": "StorageV2",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "properties": {
        "minimumTlsVersion": "TLS1_2"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-03-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[if(variables('isSharedPlan'), format('{0}1', variables('skuFamily')), format('{0}{1}', variables('skuFamily'), parameters('planSize')))]",
        "tier": "[parameters('sku')]",
        "size": "[format('{0}{1}', variables('skuFamily'), parameters('planSize'))]",
        "family": "[variables('skuFamily')]",
        "capacity": 0
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-03-01",
      "name": "[variables('appName')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "enabled": true,
        "reserved": false,
        "clientAffinityEnabled": true,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "siteConfig": {
          "alwaysOn": true,
          "appSettings": [
            {
              "name": "AzureAd:Instance",
              "value": "https://login.microsoftonline.com/"
            },
            {
              "name": "AzureAd:TenantId",
              "value": "[parameters('tenantId')]"
            },
            {
              "name": "AzureAd:ClientId",
              "value": "[parameters('appClientId')]"
            },
            {
              "name": "AzureAd:ClientSecret",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName=ClientSecret)', variables('keyVaultName'))]"
            },
            {
              "name": "AzureAd:ApplicationIdURI",
              "value": "[format('api://{0}/{1}', if(variables('useFrontDoor'), reference(resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorName'), variables('frontDoorName')), '2021-06-01').hostName, parameters('customDomainName')), parameters('appClientId'))]"
            },
            {
              "name": "AzureAd:ValidIssuers",
              "value": "https://login.microsoftonline.com/TENANT_ID/v2.0,https://sts.windows.net/TENANT_ID/"
            },
            {
              "name": "AzureAd:GraphScope",
              "value": "https://graph.microsoft.com/User.Read openid profile https://graph.microsoft.com/Group.Read.All https://graph.microsoft.com/User.Read.All https://graph.microsoft.com/Presence.Read.All"
            },
            {
              "name": "CacheInterval",
              "value": "[format('{0}', parameters('cacheInterval'))]"
            },
            {
              "name": "ApplicationInsights:ConnectionString",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName=AppInsightsConnString)', variables('keyVaultName'))]"
            },
            {
              "name": "Storage:ConnectionString",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName=StorageConnString)', variables('keyVaultName'))]"
            },
            {
              "name": "ApplicationInsights:LogLevel:Default",
              "value": "Information"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "~16"
            },
            {
              "name": "SCM_COMMAND_IDLE_TIMEOUT",
              "value": "600"
            }
          ],
          "cors": {
            "supportCredentials": true,
            "allowedOrigins": [
              "[format('https://{0}', if(variables('useFrontDoor'), reference(resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorName'), variables('frontDoorName')), '2021-06-01').hostName, parameters('customDomainName')))]"
            ]
          },
          "ftpsState": "Disabled",
          "metadata": [
            {
              "name": "CURRENT_STACK",
              "value": "dotnetcore"
            }
          ],
          "minTlsVersion": "1.2",
          "netFrameworkVersion": "v6.0",
          "scmMinTlsVersion": "1.2",
          "use32BitWorkerProcess": false,
          "keyVaultReferenceIdentity": "SystemAssigned"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorName'), variables('frontDoorName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('gitRepoUrl')))]",
      "type": "Microsoft.Web/sites/sourcecontrols",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}/{1}', variables('appName'), 'web')]",
      "properties": {
        "repoUrl": "[parameters('gitRepoUrl')]",
        "branch": "[parameters('gitBranch')]",
        "isManualIntegration": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('appName'))]"
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-06-01",
      "name": "[variables('logAnalyticsName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 90,
        "workspaceCapping": {
          "dailyQuotaGb": 1
        }
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('appInsightsName')]",
      "kind": "web",
      "location": "[parameters('location')]",
      "tags": {
        "[format('hidden-link:{0}/providers/Microsoft.Web/sites/{1}', resourceGroup().id, variables('appName'))]": "Resource"
      },
      "properties": {
        "Application_Type": "web",
        "Request_Source": "rest",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2021-11-01-preview",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "accessPolicies": [
          {
            "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('appName')), '2021-03-01', 'full').identity.principalId]",
            "permissions": {
              "certificates": [],
              "keys": [],
              "secrets": [
                "get"
              ]
            },
            "tenantId": "[parameters('tenantId')]"
          }
        ],
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false,
        "enableSoftDelete": true,
        "publicNetworkAccess": "Enabled",
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "softDeleteRetentionInDays": 90,
        "tenantId": "[parameters('tenantId')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('appName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-11-01-preview",
      "name": "[format('{0}/{1}', variables('keyVaultName'), 'AppInsightsConnString')]",
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[format('{0}', reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02').ConnectionString)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-11-01-preview",
      "name": "[format('{0}/{1}', variables('keyVaultName'), 'ClientSecret')]",
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[parameters('appClientSecret')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-11-01-preview",
      "name": "[format('{0}/{1}', variables('keyVaultName'), 'StorageConnString')]",
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', variables('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "condition": "[variables('useFrontDoor')]",
      "type": "Microsoft.Cdn/profiles",
      "apiVersion": "2021-06-01",
      "name": "[variables('frontDoorName')]",
      "location": "global",
      "sku": {
        "name": "Standard_AzureFrontDoor"
      }
    },
    {
      "condition": "[variables('useFrontDoor')]",
      "type": "Microsoft.Cdn/profiles/afdEndpoints",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}', variables('frontDoorName'), variables('frontDoorName'))]",
      "location": "global",
      "properties": {
        "enabledState": "Enabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorName'))]"
      ]
    },
    {
      "condition": "[variables('useFrontDoor')]",
      "type": "Microsoft.Cdn/profiles/originGroups",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}', variables('frontDoorName'), format('{0}OriginGroup', variables('frontDoorName')))]",
      "properties": {
        "loadBalancingSettings": {
          "sampleSize": 4,
          "successfulSamplesRequired": 3
        },
        "healthProbeSettings": {
          "probePath": "/",
          "probeRequestType": "HEAD",
          "probeProtocol": "Https",
          "probeIntervalInSeconds": 100
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorName'))]"
      ]
    },
    {
      "condition": "[variables('useFrontDoor')]",
      "type": "Microsoft.Cdn/profiles/originGroups/origins",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}/{2}', variables('frontDoorName'), format('{0}OriginGroup', variables('frontDoorName')), format('{0}Origin', variables('frontDoorName')))]",
      "properties": {
        "hostName": "[variables('appDomain')]",
        "httpPort": 80,
        "httpsPort": 443,
        "originHostHeader": "[variables('appDomain')]",
        "priority": 1,
        "weight": 50
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles/originGroups', variables('frontDoorName'), format('{0}OriginGroup', variables('frontDoorName')))]"
      ]
    },
    {
      "condition": "[variables('useFrontDoor')]",
      "type": "Microsoft.Cdn/profiles/afdEndpoints/routes",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}/{2}', variables('frontDoorName'), variables('frontDoorName'), format('{0}Route', variables('frontDoorName')))]",
      "properties": {
        "originGroup": {
          "id": "[resourceId('Microsoft.Cdn/profiles/originGroups', variables('frontDoorName'), format('{0}OriginGroup', variables('frontDoorName')))]"
        },
        "supportedProtocols": [
          "Https"
        ],
        "patternsToMatch": [
          "/*"
        ],
        "forwardingProtocol": "HttpsOnly",
        "linkToDefaultDomain": "Enabled",
        "httpsRedirect": "Enabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorName'), variables('frontDoorName'))]",
        "[resourceId('Microsoft.Cdn/profiles/originGroups/origins', variables('frontDoorName'), format('{0}OriginGroup', variables('frontDoorName')), format('{0}Origin', variables('frontDoorName')))]",
        "[resourceId('Microsoft.Cdn/profiles/originGroups', variables('frontDoorName'), format('{0}OriginGroup', variables('frontDoorName')))]"
      ]
    }
  ],
  "outputs": {
    "appClientId": {
      "type": "string",
      "value": "[parameters('appClientId')]"
    },
    "appDomain": {
      "type": "string",
      "value": "[if(variables('useFrontDoor'), reference(resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorName'), variables('frontDoorName')), '2021-06-01').hostName, format('Please create custom domain name {0} for {1} and use that in the manifest', parameters('customDomainName'), variables('appDomain')))]"
    }
  }
}